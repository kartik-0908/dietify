generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(uuid())
  email           String         @unique
  firstName       String
  lastName        String
  phoneNumber     String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  onboarded       Boolean        @default(false)
  goal            String? // e.g., weight loss, muscle gain
  gender          String? // e.g., male, female
  dateOfBirth     DateTime? // e.g., 1990-01-01
  height          Float? // in cm
  weight          Float? // in kg
  dietPreference  String? // e.g., veg, non-veg, vegan
  activityLevel   String? // e.g., sedentary, light, moderate, heavy, athlete
  diseases        String[]
  waterIntakeGoal Int            @default(2000)
  WorkoutLog      WorkoutLog[]
  FavoriteMeal    FavoriteMeal[]
  WaterIntake     WaterIntake[]
  DietChart       DietChart[]
  WeightLog       WeightLog[]
  StepLog         StepLog[]
}

model WeightLog {
  id     String   @id @default(uuid())
  userId String
  weight Float // Weight in kg
  date   DateTime @default(now())
  note   String? // Optional notes about the weight entry
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([date])
}

model StepLog {
  id     String   @id @default(uuid())
  userId String
  steps  Float
  date   DateTime @default(now())
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([date])
}

model MealItem {
  id            String          @id @default(uuid())
  name          String
  servingSize   String
  Carbs         Float
  Fat           Float
  Protein       Float
  Calories      Float
  Image         String
  FavoriteMeal  FavoriteMeal[]
  BreakfastItem BreakfastItem[]
  LunchItem     LunchItem[]
  DinnerItem    DinnerItem[]
}

model FavoriteMeal {
  id         String   @id @default(uuid())
  userId     String
  mealItemId String
  addedAt    DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  mealItem   MealItem @relation(fields: [mealItemId], references: [id], onDelete: Cascade)

  @@unique([userId, mealItemId])
  @@index([userId])
  @@index([mealItemId])
}

model Workout {
  id         Int          @id @default(autoincrement())
  name       String
  met        Float
  unit       String
  duration   Float
  WorkoutLog WorkoutLog[]
}

model WorkoutLog {
  id             String   @id @default(uuid())
  userId         String
  workoutId      Int
  date           DateTime @default(now())
  duration       Float? // Actual duration the user performed
  caloriesBurned Float
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workout        Workout  @relation(fields: [workoutId], references: [id])

  @@index([userId])
  @@index([workoutId])
}

model WaterIntake {
  id     String   @id @default(uuid())
  userId String
  date   DateTime @default(now())
  amount Float // Amount of water in milliliters (ml)
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([date])
}

model DietChart {
  id             String          @id @default(uuid())
  userId         String
  day            Int
  month          Int
  year           Int
  createdAt      DateTime        @default(now())
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  breakfastItems BreakfastItem[]
  lunchItems     LunchItem[]
  dinnerItems    DinnerItem[]

  @@unique([userId, day, month, year])
  @@index([userId])
}

model BreakfastItem {
  id          String    @id @default(uuid())
  dietChartId String
  mealItemId  String
  servingSize String
  Carbs       Float
  Fat         Float
  Protein     Float
  Calories    Float
  isConsumed  Boolean   @default(false)
  dietChart   DietChart @relation(fields: [dietChartId], references: [id], onDelete: Cascade)
  mealItem    MealItem  @relation(fields: [mealItemId], references: [id])

  @@index([dietChartId])
  @@index([mealItemId])
}

model LunchItem {
  id          String    @id @default(uuid())
  dietChartId String
  mealItemId  String
  servingSize String
  Carbs       Float
  Fat         Float
  Protein     Float
  Calories    Float
  isConsumed  Boolean   @default(false)
  dietChart   DietChart @relation(fields: [dietChartId], references: [id], onDelete: Cascade)
  mealItem    MealItem  @relation(fields: [mealItemId], references: [id])

  @@index([dietChartId])
  @@index([mealItemId])
}

model DinnerItem {
  id          String    @id @default(uuid())
  dietChartId String
  mealItemId  String
  servingSize String
  Carbs       Float
  Fat         Float
  Protein     Float
  Calories    Float
  isConsumed  Boolean   @default(false)
  dietChart   DietChart @relation(fields: [dietChartId], references: [id], onDelete: Cascade)
  mealItem    MealItem  @relation(fields: [mealItemId], references: [id])

  @@index([dietChartId])
  @@index([mealItemId])
}
