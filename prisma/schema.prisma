generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(uuid())
  email           String         @unique
  firstName       String
  lastName        String
  phoneNumber     String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  isOnboarded     Boolean        @default(false)
  activityLevel   String?
  dateOfBirth     DateTime?
  dietPreference  String?
  diseases        String[]
  gender          String?
  goal            String?
  height          Float?
  weight          Float?
  waterIntakeGoal Int            @default(2000)
  DietChart       DietChart[]
  FavoriteMeal    FavoriteMeal[]
  StepLog         StepLog[]
  WaterIntake     WaterIntake[]
  WeightLog       WeightLog[]
  WorkoutLog      WorkoutLog[]
}

model WeightLog {
  id     String   @id @default(uuid())
  userId String
  weight Float
  date   DateTime @default(now())
  note   String?
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([date])
}

model StepLog {
  id     String   @id @default(uuid())
  userId String
  steps  Float
  date   DateTime @default(now())
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([date])
}

model MealItem {
  id            Int             @id @default(autoincrement())
  name          String
  Calories      Float
  Carbs         Float
  Fat           Float
  Protein       Float
  servingSize   String
  BreakfastItem BreakfastItem[]
  DinnerItem    DinnerItem[]
  FavoriteMeal  FavoriteMeal[]
  LunchItem     LunchItem[]
}

model FavoriteMeal {
  id         String   @id @default(uuid())
  userId     String
  mealItemId Int
  addedAt    DateTime @default(now())
  mealItem   MealItem @relation(fields: [mealItemId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, mealItemId])
  @@index([userId])
  @@index([mealItemId])
}

model Workout {
  id         Int          @id @default(autoincrement())
  name       String
  met        Float
  unit       String
  duration   Float
  WorkoutLog WorkoutLog[]
}

model WorkoutLog {
  id             String   @id @default(uuid())
  userId         String
  workoutId      Int
  date           DateTime @default(now())
  duration       Float?
  sets           Int?
  count          Int?
  caloriesBurned Float
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workout        Workout  @relation(fields: [workoutId], references: [id])

  @@index([userId])
  @@index([workoutId])
}

model WaterIntake {
  id     String   @id @default(uuid())
  userId String
  date   DateTime @default(now())
  amount Float
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([date])
}

model DietChart {
  id             String          @id @default(uuid())
  userId         String
  createdAt      DateTime        @default(now())
  day            Int
  month          Int
  year           Int
  breakfastItems BreakfastItem[]
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  dinnerItems    DinnerItem[]
  lunchItems     LunchItem[]

  @@unique([userId, day, month, year])
  @@index([userId])
}

model BreakfastItem {
  id          String    @id @default(uuid())
  dietChartId String
  mealItemId  Int
  servingSize String
  Carbs       Float
  Fat         Float
  Protein     Float
  Calories    Float
  isConsumed  Boolean   @default(false)
  dietChart   DietChart @relation(fields: [dietChartId], references: [id], onDelete: Cascade)
  mealItem    MealItem  @relation(fields: [mealItemId], references: [id])

  @@index([dietChartId])
  @@index([mealItemId])
}

model LunchItem {
  id          String    @id @default(uuid())
  dietChartId String
  mealItemId  Int
  servingSize String
  Carbs       Float
  Fat         Float
  Protein     Float
  Calories    Float
  isConsumed  Boolean   @default(false)
  dietChart   DietChart @relation(fields: [dietChartId], references: [id], onDelete: Cascade)
  mealItem    MealItem  @relation(fields: [mealItemId], references: [id])

  @@index([dietChartId])
  @@index([mealItemId])
}

model DinnerItem {
  id          String    @id @default(uuid())
  dietChartId String
  mealItemId  Int
  servingSize String
  Carbs       Float
  Fat         Float
  Protein     Float
  Calories    Float
  isConsumed  Boolean   @default(false)
  dietChart   DietChart @relation(fields: [dietChartId], references: [id], onDelete: Cascade)
  mealItem    MealItem  @relation(fields: [mealItemId], references: [id])

  @@index([dietChartId])
  @@index([mealItemId])
}
